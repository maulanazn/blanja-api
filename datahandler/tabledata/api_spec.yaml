openapi: '3.0.2'
info:
  title: Pay book backend
  version: '1.0'
servers:
  - url: http://{devurl}/api
    description: Url list
    variables:
      devurl:
        enum:
          - localhost:3000
          - belanjabackend.cyclic.com
        default: localhost:3000
# COMPONENT BODY
components:
  schemas:
    # COMPONENT login customer
    registercustomer:
      type: object
      properties:
        user_name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
      - user_name
      - email
      - password
    # COMPONENT login seller
    registerseller:
      type: object
      properties:
        user_name:
          type: string
        email:
          type: string
        phone:
          type: number
        store_name:
          type: string
        password:
          type: string
      required:
        - user_name
        - email
        - phone
        - store_name
        - password
    # COMPONENT address
    shippingaddress:
      type: object
      properties:
        address_type:
          type: object
          properties:
            data:
              type: object
              properties:
                home:
                  type: string
                office:
                  type: string
        recipient_name:
          type: string
        recipient_phone:
          type: number
        address:
          type: string
        postal_code:
          type: string
        city:
          type: string
      required:
        - address_type
        - recipient_name
        - recipient_phone
        - address
        - postal_code
        - city
    # COMPONENT product
    product:
      type: object
      properties:
        category_name:
          type: object
          properties:
            shoes:
              type: string
            shirt:
              type: string
            hoodie:
              type: string
            sweater:
              type: string
            any:
              type: string
        image:
          type: string
        product_name:
          type: string
        brand:
          type: string
        rating:
          type: integer
        price:
          type: integer
        color:
          type: object
          properties:
            yellow:
              type: string
            black:
              type: string
            red:
              type: string
            green:
              type: string
            any:
              type: string
        size:
          type: string
        quantity:
          type: integer
paths:  
  # LOGIN CUSTOMER
  /login/customer:
    post:
      responses: 
        '201':
          description: Login customer
          content:
            application/json:
              example:
                {
                  "status": 201,
                  "message": "Successfully login as customer, enjoy your shopping",
                  "data": {
                    customer_id: string,
                    user_name: string
                  },
                  access_token: string
                }

      requestBody:
          content:
            x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/registercustomer'
  # CUSTOMER PROFILE
  /customer/profile:
    get:
      responses: 
        '200':
          headers: 
            Content-Type:
              description: optional
              content:
                application/json:
                  schema:
                    type: string
            Authorization:
              description: put token to access all route
              content:
                access_token:
                  schema:
                    type: string
          description: Data customer by id / profile
          content:
            application/json:
              example:
                {
                  "status": 200,
                  "message": "Successfully get profile customer",
                  "data": {
                    customer_id: string,
                    user_name: string,
                    email: string,
                    password: string
                  },
                }
 # CUSTOMER CART
  /customer/cart:
    get:
      responses: 
        '200':
          headers: 
            Content-Type:
              description: optional
              content:
                application/json:
                  schema:
                    type: string
            Authorization:
              description: put token to access all route
              content:
                access_token:
                  schema:
                    type: string
          description: Cart data by user_id
          content:
            application/json:
              example:
                {
                  "status": 200,
                  "message": "Successfully get cart by user",
                  "data": {
                    customer_id: string,
                    address: {
                      user_name: string,
                      recipient_name: string,
                      address_type: string,
                      address: string,
                      city: string,
                      postal_code: string
                    },
                    product_id: string,
                    image: string,
                    product_name: string,
                    brand: string,
                    price: integer,
                    total_order: integer,
                    delivery_cost: integer,
                    total_cost: integer
                  },
                }
  # LOGIN SELLER
  /login/seller:
    post:
      responses: 
        '201':
          description: Login seller
          content:
            application/json:
              example:
                {
                  "status": 201,
                  "message": "Successfully login as seller, enjoy your salary",
                  "data": {
                    seller_id: string,
                    store_name: string
                  },
                  access_token: string
                }
      requestBody:
        content:
          x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/registerseller"
  # NEW CUSTOMER ADDRESS
  /address/?userId=string:
    post:
      parameters:
        - in: query
          name: user_id
          schema: 
            type: string
          required: true
          description: User id to create new address instead of current address
      responses: 
        '201':
          description: Shipping Address
          content:
            application/json:
              example:
                {
                  "status": 201,
                  "message": "Successfully post shipping address",
                  "data": {
                    customer_id: string,
                    address_type: string,
                    recipient_name: string,
                    recipient_phone: number,
                    address: string,
                    postal_code: string,
                    city: string
                  }
                }
      requestBody:
        content:
          x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/shippingaddress"
  # UPDATE CUSTOMER ADDRESS
  /address/user/?userId=string:
    put:
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: User id to update current address instead of new address
      responses: 
        '202':
          description: Shipping Address
          content:
            application/json:
              example:
                {
                  "status": 202,
                  "message": "Successfully update shipping address",
                  "data": {
                    customer_id: string,
                    address_type: string,
                    recipient_name: string,
                    recipient_phone: number,
                    address: string,
                    postal_code: string,
                    city: string
                  }
                }
      requestBody:
        content:
          x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/shippingaddress"
  # ALL PRODUCT (home)
  /home:
    get:
      responses: 
        '200':
          headers: 
            Content-Type:
              description: optional
              content:
                application/json:
                  schema:
                    type: string
          description: All products data
          content:
            application/json:
              example:
                {
                  "status": 200,
                  "message": "Successfully get all products",
                  category: [
                    {
                        category_image: string,
                        category_name: string,
                    },
                  ],
                  products: [
                    {
                      product_id: string,
                      image: string,
                      product_name: string,
                      price: integer,
                      brand: string,
                      rating: integer
                    }
                  ]
                }
  # PRODUCT By id (detail)
  /product/?product_id=string:
    get:
      parameters:
        - in: query
          name: product_id
          description: product_id query params for product detail
          schema:
            type: string
      responses: 
        '200':
          headers: 
            Content-Type:
              description: optional
              content:
                application/json:
                  schema:
                    type: string
          description: All products data
          content:
            application/json:
              example:
                {
                  "status": 200,
                  "message": "Successfully get all products",
                  data: {
                    product_id: string,
                    category_name: string,
                    image: string,
                    product_name: string,
                    brand: string,
                    rating: integer,
                    price: integer,
                    color: string,
                    size: string,
                    quantity: integer,
                    description: string,
                    rating_number: integer
                  }
                }